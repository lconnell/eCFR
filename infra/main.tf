terraform {
  required_version = ">= 1.13.3"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.55"
    }
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.6"
    }
  }
}

provider "aws" {
  region = var.region
}

locals {
  project        = var.project
  bucket_name    = "${var.project}-data-${var.suffix}"
  s3_key         = "ecfr/agency_sizes.json"
  lambda_runtime = "python3.12"
}

# Data bucket with lifecycle to delete archives older than 15 days
resource "aws_s3_bucket" "data" {
  bucket        = local.bucket_name
  force_destroy = true
}

resource "aws_s3_bucket_lifecycle_configuration" "lifecycle" {
  bucket = aws_s3_bucket.data.id

  rule {
    id     = "delete-archives-after-15-days"
    status = "Enabled"

    filter {
      prefix = "ecfr/archives/"
    }

    expiration {
      days = 15
    }
  }
}

# IAM
resource "aws_iam_role" "lambda_role" {
  name = "${local.project}-lambda-role-${var.suffix}"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = { Service = "lambda.amazonaws.com" },
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_policy" "lambda_policy" {
  name = "${local.project}-lambda-policy-${var.suffix}"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
        Resource = "*"
      },
      {
        Effect   = "Allow",
        Action   = ["s3:GetObject","s3:PutObject","s3:ListBucket"],
        Resource = [
          aws_s3_bucket.data.arn,
          "${aws_s3_bucket.data.arn}/*"
        ]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Package source code
data "archive_file" "src_zip" {
  type        = "zip"
  source_dir  = "${path.module}/../src"
  output_path = "${path.module}/build/src.zip"
}

# Upload the lambda layer (requests) generated by task layer:build
resource "aws_s3_object" "layer_zip" {
  bucket = aws_s3_bucket.data.id
  key    = "layers/requests/layer.zip"
  source = "${path.module}/../layer.zip"
  etag   = filemd5("${path.module}/../layer.zip")
}

resource "aws_lambda_layer_version" "requests" {
  layer_name          = "${local.project}-requests-${var.suffix}"
  s3_bucket           = aws_s3_bucket.data.bucket
  s3_key              = aws_s3_object.layer_zip.key
  compatible_runtimes = [local.lambda_runtime]
  description         = "Requests dependency layer"
}

# Ingestor
resource "aws_lambda_function" "ingestor" {
  function_name = "${local.project}-ingestor-${var.suffix}"
  role          = aws_iam_role.lambda_role.arn
  handler       = "compute_sizes.handler"
  runtime       = local.lambda_runtime
  filename      = data.archive_file.src_zip.output_path
  timeout       = 900
  layers        = [aws_lambda_layer_version.requests.arn]

  environment {
    variables = {
      DATA_BUCKET                 = aws_s3_bucket.data.bucket
      DATA_KEY                    = local.s3_key
      ARCHIVE_PREFIX              = "ecfr/archives/"
      DATA_TTL_HOURS              = "26"
      ECFR_MAX_TITLES             = tostring(var.ecfr_max_titles)
      ECFR_BASE_URL               = var.ecfr_base_url
      ECFR_TITLE_JSON_PATH_TMPL   = var.ecfr_title_json_path_tmpl
      HTTP_USER_AGENT             = var.http_user_agent
    }
  }
}

# Daily schedule
resource "aws_cloudwatch_event_rule" "daily" {
  name                = "${local.project}-daily-${var.suffix}"
  schedule_expression = "rate(1 day)"
}

resource "aws_cloudwatch_event_target" "ingestor_target" {
  rule      = aws_cloudwatch_event_rule.daily.name
  target_id = "ingestor"
  arn       = aws_lambda_function.ingestor.arn
}

resource "aws_lambda_permission" "allow_events" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.ingestor.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.daily.arn
}

# API Lambda
resource "aws_lambda_function" "api" {
  function_name = "${local.project}-api-${var.suffix}"
  role          = aws_iam_role.lambda_role.arn
  handler       = "api_handler.handler"
  runtime       = local.lambda_runtime
  filename      = data.archive_file.src_zip.output_path
  timeout       = 29
  layers        = [aws_lambda_layer_version.requests.arn]

  environment {
    variables = {
      DATA_BUCKET                 = aws_s3_bucket.data.bucket
      DATA_KEY                    = local.s3_key
      DATA_TTL_HOURS              = "26"
      ECFR_MAX_TITLES             = tostring(var.ecfr_max_titles)
      ECFR_BASE_URL               = var.ecfr_base_url
      ECFR_TITLE_JSON_PATH_TMPL   = var.ecfr_title_json_path_tmpl
      HTTP_USER_AGENT             = var.http_user_agent
    }
  }
}

# HTTP API
resource "aws_apigatewayv2_api" "http" {
  name          = "${local.project}-api-${var.suffix}"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "lambda_proxy" {
  api_id                 = aws_apigatewayv2_api.http.id
  integration_type       = "AWS_PROXY"
  integration_method     = "POST"
  integration_uri        = aws_lambda_function.api.invoke_arn
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "agencies" {
  api_id    = aws_apigatewayv2_api.http.id
  route_key = "GET /agencies"
  target    = "integrations/${aws_apigatewayv2_integration.lambda_proxy.id}"
}

resource "aws_lambda_permission" "api_invoke" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.http.execution_arn}/*/*"
}

resource "aws_apigatewayv2_stage" "prod" {
  api_id      = aws_apigatewayv2_api.http.id
  name        = "$default"
  auto_deploy = true
}

output "api_base_url" {
  value = aws_apigatewayv2_api.http.api_endpoint
}

output "s3_data_url" {
  value = "s3://${local.bucket_name}/${local.s3_key}"
}
