# https://taskfile.dev/
version: '3'

vars:
  AWS_REGION: '{{.AWS_REGION | default "us-east-1"}}'
  TF_DIR: 'infra'
  VENV: '.venv'
  PYTHON_VERSION: 'python3.12'

tasks:
  setup:
    desc: Create venv with uv, install dev tools (ruff)
    cmds:
      - 'uv venv --python {{.PYTHON_VERSION}} {{.VENV}}'
      - 'uv pip install --editable .[dev]'

  fmt:
    desc: Format and lint Python with Ruff
    cmds:
      - 'uv run ruff format src'
      - 'uv run ruff check --fix src'

  layer:build:
    desc: Build Lambda layer with dependencies (in ./infra/build/)
    cmds:
      - 'rm -rf layer && mkdir -p layer/python'
      - 'uv pip install --no-cache-dir --target layer/python .'
      - 'find layer/python -name "__pycache__" -type d -exec rm -rf {} +'
      - 'find layer/python -name "*.dist-info" -type d -exec rm -rf {} +'
      - 'mkdir -p infra/build'
      - 'cd layer && zip -r ../infra/build/layer.zip python'
      - 'rm -rf layer'

  tf:init:
    dir: '{{.TF_DIR}}'
    env:
      AWS_REGION: '{{.AWS_REGION}}'
    cmds:
      - terraform init

  tf:plan:
    dir: '{{.TF_DIR}}'
    env:
      AWS_REGION: '{{.AWS_REGION}}'
    cmds:
      - terraform plan -var-file="env.dev.tfvars" -var="region={{.AWS_REGION}}"

  tf:apply:
    dir: '{{.TF_DIR}}'
    env:
      AWS_REGION: '{{.AWS_REGION}}'
    cmds:
      - terraform apply -auto-approve -var-file="env.dev.tfvars" -var="region={{.AWS_REGION}}"

  tf:destroy:
    dir: '{{.TF_DIR}}'
    env:
      AWS_REGION: '{{.AWS_REGION}}'
    cmds:
      - terraform destroy -auto-approve -var-file="env.dev.tfvars" -var="region={{.AWS_REGION}}"

  deploy:
    desc: Build layer + package + apply
    deps: [fmt, layer:build, tf:init]
    cmds:
      - task tf:apply

  url:
    desc: Print API URL
    dir: '{{.TF_DIR}}'
    cmds:
      - terraform output api_base_url

  curl:
    desc: Quick test of API
    dir: '{{.TF_DIR}}'
    cmds:
      - 'API=$(terraform output -raw api_base_url) && curl -s "$API/agencies" | jq ".agencies | to_entries[0:5]"'

  run:
    desc: Run the script locally
    cmds:
      - 'cd src && python ecfr_client.py'

  ingest:
    desc: Manually trigger the ingestor Lambda to populate data
    dir: '{{.TF_DIR}}'
    cmds:
      - 'aws lambda invoke --function-name $(terraform output -raw ingestor_function_name) response.json'
      - 'cat response.json && rm response.json'

  logs:
    desc: Show recent logs from the ingestor Lambda
    dir: '{{.TF_DIR}}'
    cmds:
      - |
        LOG_GROUP=$(terraform output -raw ingestor_log_group)
        # Use portable date command (works on both macOS and Linux)
        START_TIME=$(python3 -c "import time; print(int((time.time() - 3600) * 1000))")
        echo "Recent logs from $LOG_GROUP:"
        aws logs filter-log-events --log-group-name "$LOG_GROUP" --start-time "$START_TIME" --query 'events[].message' --output text || echo "No recent logs found"

  debug:
    desc: Show Lambda environment variables and status
    dir: '{{.TF_DIR}}'
    cmds:
      - |
        FUNCTION_NAME=$(terraform output -raw ingestor_function_name)
        echo "=== Environment Variables ==="
        aws lambda get-function --function-name "$FUNCTION_NAME" --query 'Configuration.Environment.Variables'
        echo "=== Function Configuration ==="
        aws lambda get-function --function-name "$FUNCTION_NAME" --query 'Configuration.{MemorySize:MemorySize,Timeout:Timeout,Runtime:Runtime,LastModified:LastModified}'

  zip:
    desc: Create ecfr.zip archive of project code and configs only
    cmds:
      - 'rm -f ecfr.zip'
      - |
        zip -r ecfr.zip . \
          -x ".*" \
          -x "*/.*" \
          -x "*/.*/\*" \
          -x "*__pycache__*" \
          -x "*.pyc" \
          -x "infra/build/*" \
          -x "infra/terraform.tfstate*" \
          -x "response.json" \
          -x "*.log" \
          -x "*.zip"
      - 'echo "Created ecfr.zip"'
